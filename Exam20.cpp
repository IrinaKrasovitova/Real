#include "stdafx.h"
#include <iostream>
#include <conio.h>
#include <cmath>
using namespace std;
class kv // Базовый класс - "Точка на плоскости"
{
protected:
	double x; // Координаты точки
public:
	kv(double x, double y) // Конструктор для инициализации полей
	{
		this->x = x; 
	}
	virtual void print() // Метод для печати полей (виртуальный)
	{
		cout << "\nx=" << x; // Печатаем значения полей
		cout << "\np=" << 4*x;
	}
};
class pr : public kv // Производный класс - "Точка в пространстве"
{
	double y; // Новое поле - координата z
public:
	pr(double x, double y) : // Конструктор
		kv(x) // Явный вызов конструктора базового класса
	{
		this->y = y;
	}
	void print() // Переопределенный метод print
	{
		kv::print(); // Вызов в переопределенном методе метода 
		// базового класса
		cout << " y=" << y; // Допечатывает поле z
		cout << "\npp=" << 2*(x+y);

	}
};	

	int main(int argc, char* argv[])
	{

		kv p1(2); // Создается объект с вызовом конструктора
		pr p3(3, 4); // Создается объект с вызовом конструктора
		kv *pp; // Указатель типа базового класса
		pp = &p1; // Настраиваем на объект базового класса
		pp->print(); // Вызов метода через указатель
		pp = &p3; // Настриваем указатель на объект производного класса 
		// (преобразование типа допустимо)
		pp->print(); // Вызов метода через указатель, вызывается метод класса point3d
		// Если метод print в классе point был объявлен без virtual, 
		// то вызывался бы метод print класс point

		system("pause");
		return 0;
	}


